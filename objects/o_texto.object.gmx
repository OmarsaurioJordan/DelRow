<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tipo = noone; // que tipo de input de texto es
sobre = false; // true si el mouse esta encima
enfoco = false; // si fue clickeado y esta para editar
activo = true; // si se puede editar el texto
talla = 1; // numero de lineas de a 50px cada una
texto = "";
reloj_parpadea = 0; // intermitencia cursor

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// limpiar foco mouse
if mouse_check_button_pressed(mb_left) {
    with o_texto {
        enfoco = false;
    }
}

// parpadeo
var dt = delta_time * 0.000001;
reloj_parpadea -= dt;
if reloj_parpadea &lt;= 0 {
    reloj_parpadea = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// acciones generales
if activo {
    var okey = false;
    
    // sombrear
    if point_in_rectangle(mouse_x, mouse_y,
            x - 300, y - 20, x + 300, y + (talla - 1) * 50 + 20) {
        sobre = true;
    }
    else {
        sobre = false;
    }
    
    if o_app.reloj_notifi != 0 {
        exit;
    }
    
    // enfocar para escritura
    if sobre and mouse_check_button_pressed(mb_left) {
        enfoco = true;
    }
    
    // pegar texto de portapapeles
    if enfoco and keyboard_check(vk_control) {
        if keyboard_check_pressed(ord('C')) {
            if tipo == m_txt_login_pasword or tipo == m_txt_login_newpas {
                clipboard_set_text(string_repeat("*", string_length(texto)));
            }
            else {
                clipboard_set_text(texto);
            }
            okey = true;
        }
        else if keyboard_check_pressed(ord('V')) {
            switch tipo {
                case m_txt_login_identifi:
                case m_txt_regi_correo:
                case m_txt_find:
                    texto = s_txt_valido(clipboard_get_text(), m_msk_correo); break;
                case m_txt_nombre:
                    texto = s_txt_valido(clipboard_get_text(), m_msk_nombre); break;
                default:
                    texto = s_txt_valido(clipboard_get_text(), m_msk_todo); break;
            }
            okey = true;
        }
    }
    
    // escribir
    if enfoco and !okey and keyboard_check_pressed(vk_anykey) {
        switch keyboard_lastkey {
            case vk_enter:
                if tipo == m_txt_texto {
                    texto += "#";
                }
                break;
            case vk_tab:
                var otr = noone;
                switch tipo {
                    case m_txt_login_identifi: otr = m_txt_login_pasword; break;
                    case m_txt_login_pasword: otr = m_txt_login_newpas; break;
                    case m_txt_login_newpas: otr = m_txt_login_identifi; break;
                    case m_txt_texto: texto += "   "; break;
                }
                if otr != noone {
                    with o_texto {
                        enfoco = false;
                    }
                    with o_texto {
                        if tipo == otr {
                            enfoco = true;
                        }
                    }
                }
                break;
            case vk_backspace:
                if keyboard_check(vk_shift) {
                    texto = "";
                }
                else if texto != "" {
                    if string_length(texto) == 1 {
                        texto = "";
                    }
                    else {
                        texto = string_copy(texto, 1, string_length(texto) - 1);
                    }
                }
                break;
            default:
                var c;
                switch tipo {
                    case m_txt_login_identifi:
                    case m_txt_regi_correo:
                    case m_txt_find:
                        c = s_char_valido(keyboard_lastchar, m_msk_correo); break;
                    case m_txt_nombre:
                        c = s_char_valido(keyboard_lastchar, m_msk_nombre); break;
                    default:
                        c = s_char_valido(keyboard_lastchar, m_msk_todo); break;
                }
                texto += c;
                break;
        }
        okey = true;
    }
    
    // limpiar cosas y verificar texto
    if okey {
        keyboard_lastchar = "";
        keyboard_lastkey = -1;
        if string_length(texto) &gt; 1 {
            switch tipo {
                case m_txt_login_identifi:
                case m_txt_regi_correo:
                case m_txt_find:
                    texto = string_copy(texto, 1, min(string_length(texto), 64));
                    break;
                case m_txt_login_pasword:
                case m_txt_login_newpas:
                    texto = string_copy(texto, 1, min(string_length(texto), 32));
                    break;
                case m_txt_nombre:
                    texto = string_copy(texto, 1, min(string_length(texto), 24));
                    break;
                case m_txt_texto:
                    var l = string_height_ext(texto + "|", -1, 575);
                    while l &gt; talla * 50 {
                        texto = string_copy(texto, 1, string_length(texto) - 1);
                        l = string_height_ext(texto + "|", -1, 575);
                    }
                    break;
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var e = -3;
var c = c_yellow;
if sobre {
    e = 3;
}
if enfoco {
    c = c_orange;
}
if activo {
    draw_set_alpha(0.4);
    if tipo == m_txt_texto and string_length(texto) &gt;= m_txtl {
        c = merge_colour(c, c_red, 0.2);
    }
    draw_roundrect_colour_ext(x - (300 + e), y - (20 + e),
        x + (300 + e), y + ((talla - 1) * 50 + 20 + e),
        20, 20, c, c, false);
    draw_set_alpha(1);
}

if texto == "" {
    draw_set_valign(fa_middle);
    if talla == 1 {
        draw_set_halign(fa_center);
        draw_text_colour(x, y, s_msj(tipo),
            c_gray, c_gray, c_gray, c_gray, 1);
        if enfoco and reloj_parpadea &lt; 0.5 {
            draw_text_colour(x, y, "|",
                c_black, c_black, c_black, c_black, 1);
        }
    }
    else if o_app.menu == m_bot_perfil {
        draw_set_halign(fa_left);
        draw_text_colour(x - 287, y, s_msj(tipo),
            c_gray, c_gray, c_gray, c_gray, 1);
        if enfoco and reloj_parpadea &lt; 0.5 {
            draw_text_colour(x - 287, y, "|",
                c_black, c_black, c_black, c_black, 1);
        }
    }
}
else {
    if talla == 1 {
        draw_set_valign(fa_middle);
        draw_set_halign(fa_center);
        var t;
        switch tipo {
            case m_txt_login_pasword:
            case m_txt_login_newpas:
                t = string_repeat("*", string_length(texto)); break;
            default:
                t = texto; break;
        }
        if enfoco {
            if reloj_parpadea &lt; 0.5 {
                t += "|";
            }
            else {
                t += " ";
            }
        }
        var l = string_width(t);
        while l &gt; 575 {
            t = string_copy(t, 2, string_length(t) - 1);
            l = string_width(t);
        }
        draw_text_colour(x, y, t, c_black, c_black, c_black, c_black, 1);
    }
    else {
        draw_set_valign(fa_top);
        draw_set_halign(fa_left);
        if enfoco and reloj_parpadea &lt; 0.5 {
            draw_text_ext_colour(x - 287, y - 16, texto + "|", -1, 575,
                c_black, c_black, c_black, c_black, 1);
        }
        else {
            draw_text_ext_colour(x - 287, y - 16, texto, -1, 575,
                c_black, c_black, c_black, c_black, 1);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
