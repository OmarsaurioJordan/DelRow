<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>math_set_epsilon(0);
s_ventana(true);
draw_set_font(d_consola);
depth = 0;
clicdx = 0;
clicdy = 0;
enmira = noone; // unidad a ser vista

s_set_ofihttp();

gridx = floor(room_width / m_sim_celda);
gridy = floor(room_height / m_sim_celda);
visionmed = m_sim_vision / 2;
visioncuar = m_sim_vision / 4;
widthmed = room_width / 2;
for (var i = 0; i &lt; m_map_total; i++) {
    tinte[i] = s_bandera(i);
}

// datos que afectan la simulacion
velsim = 1; // velocidad de simulacion
reloj_simula = 0; // tiempo que ha transcurrido la simulacion

// datos estadisticos
unit_vivas = 0;
inst_vivas = 0;
inst_total = 0;
inst_maxim = 0;
unit_totalmundo = 0;

// crear todo con espera a que info cargue datos
esperita = true;
alarm[0] = 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// creacion

for (var i = 0; i &lt; m_map_total; i++) {
    unit_totalmundo += o_info.info_gen[i, m_info_poblacion]
}

s_crea_mapa();

// obtener los id de centroides, grupos
if o_info.continental {
    var list = ds_queue_create();
    for (var i = 0; i &lt; m_conti_total; i++) {
        with o_grupo {
            if s_ind_conti(conti, true) == i {
                ds_queue_enqueue(list, id);
            }
        }
        centroconti[i] = ds_queue_size(list);
        for (var c = 0; c &lt; centroconti[i]; c++) {
            centroide[i, c] = ds_queue_dequeue(list);
        }
    }
    ds_queue_destroy(list);
}
else {
    var list = ds_queue_create();
    for (var i = 0; i &lt; m_map_total; i++) {
        with o_grupo {
            if zona == i {
                ds_queue_enqueue(list, id);
            }
        }
        for (var c = 0; c &lt; m_sim_groupszona; c++) {
            centroide[i, c] = ds_queue_dequeue(list);
        }
    }
    ds_queue_destroy(list);
}

s_tiles_visibles();

esperita = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if esperita {
    exit;
}

if !secreto {
    s_movecam(mouse_x, mouse_y, id);
    s_zoom();
}
s_loop();
s_ventaesc();

// comandos de teclado
if keyboard_check_pressed(vk_anykey) {
    switch keyboard_key {
        case vk_up:
            velsim = min(32, velsim * 2);
            break;
        case vk_down:
            velsim = max(0.25, velsim / 2);
            break;
        case vk_tab:
            // $D cambiar secretismo solo en debug
            if automatico {
                secreto = !secreto;
                s_tiles_visibles();
            }
            break;
        case vk_escape:
            // $D salir si automatico
            if automatico {
                game_end();
                exit;
            }
            else {
                s_log("tmp.txt", "restart");
                room_goto(w_app);
                exit;
            }
            break;
    }
}

// poder seleccionar unidades o centros
if !secreto {
    if mouse_check_button_pressed(mb_left) {
        enmira = noone;
        var otr = instance_nearest(mouse_x, mouse_y + 25, o_centro);
        if point_distance(otr.x, otr.y - 25, mouse_x, mouse_y) &lt; 25 {
            enmira = otr;
        }
        if enmira == noone and instance_exists(o_carpa) {
            otr = instance_nearest(mouse_x, mouse_y + 25, o_carpa);
            if point_distance(otr.x, otr.y - 25, mouse_x, mouse_y) &lt; 25 {
                enmira = otr;
            }
        }
        if enmira == noone and instance_exists(o_movil) {
            otr = instance_nearest(mouse_x, mouse_y + 8, o_movil);
            if point_distance(otr.x, otr.y - 8, mouse_x, mouse_y) &lt; 8 {
                enmira = otr;
            }
        }
        if enmira == noone and instance_exists(o_fantasma) {
            otr = instance_nearest(mouse_x, mouse_y + 8, o_fantasma);
            if point_distance(otr.x, otr.y - 8, mouse_x, mouse_y) &lt; 8 {
                enmira = otr;
            }
        }
    }
}

// $D modo editor de ciudades
if false {
    if mouse_check_button_pressed(mb_right) {
        var ok = false;
        with o_edificio {
            if !ok and point_distance(x, y, mouse_x, mouse_y) &lt; m_sim_celda {
                ok = true;
                instance_destroy();
                break;
            }
        }
        with o_centro {
            if !ok and point_distance(x, y, mouse_x, mouse_y) &lt; m_sim_celda {
                ok = true;
                instance_destroy();
                break;
            }
        }
    }
    else if mouse_check_button_pressed(mb_left) {
        if keyboard_check(vk_shift) {
            instance_create(mouse_x, mouse_y, o_centro);
        }
        else {
            instance_create(mouse_x, mouse_y, o_edificio);
        }
    }
    else if mouse_wheel_down() or mouse_wheel_up() {
        with o_centro {
            if point_distance(x, y, mouse_x, mouse_y) &lt; m_sim_celda {
                zona++;
                if zona &gt;= m_map_total {
                    zona = 0;
                }
                break;
            }
        }
    }
    else if keyboard_check_pressed(vk_enter) {
        var f = file_text_open_write("edificios.txt");
        file_text_write_string(f, "// crear los centros de los paises");
        file_text_writeln(f);
        file_text_writeln(f);
        file_text_write_string(f, "var aux;");
        file_text_writeln(f);
        var t;
        with o_centro {
            t = "aux = instance_create(" + string(round(x)) + ", " +
                string(round(y)) + ", o_centro);";
            file_text_write_string(f, t);
            file_text_writeln(f);
            t = "aux.zona = " + string(zona) + ";";
            file_text_write_string(f, t);
            file_text_writeln(f);
        }
        file_text_writeln(f);
        file_text_write_string(f, "// crear los puntos para edificios");
        file_text_writeln(f);
        file_text_writeln(f);
        with o_edificio {
            t = "instance_create(" + string(round(x)) + ", " +
                string(round(y)) + ", o_edificio);";
            file_text_write_string(f, t);
            file_text_writeln(f);
        }
        file_text_close(f);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s_recv_ofihttp(id, async_load);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// dibujar toda la GUI
if esperita {
    exit;
}

var xv = view_xview[0];
var yv = view_yview[0];
var e = (view_wview[0] / (room_width * 0.2)) * 0.5;
var lc = c_black;

// dibujar cubierta negra
if secreto {
    lc = c_white;
    draw_rectangle_colour(xv, yv,
        xv + view_wview[0], yv + view_hview[0],
        c_black, c_black, c_black, c_black, false);
}

// dibujar datos simulacion en pantalla
draw_set_valign(fa_top);
draw_set_halign(fa_left);
var esofi = "Demo";
if o_info.oficial {
    esofi = "Official";
}
var ss = ".#   DelRow War Sim.#   " + s_minutes(reloj_simula / room_speed) +
    "   x" + string(velsim) + " (Up-Down)" +
    "#   " + s_porcent(reloj_simula / room_speed, m_sim_limite_s) + "%#   " + esofi;
// dibujar fondo blanco
if !secreto {
    draw_set_alpha(0.5);
    draw_rectangle_colour(xv, yv,
        xv + string_width(ss) * e * 1.5, yv + string_height(ss) * e * 1.5,
        c_white, c_white, c_white, c_white, false);
    draw_set_alpha(1);
}
draw_text_transformed_colour(xv, yv, ss,
    e * 1.5, e * 1.5, 0, lc, lc, lc, lc, 1);

// dibujar datos unidad o centro seleccionado
if enmira != noone {
    if instance_exists(enmira) {
        with enmira {
            switch object_index {
                case o_unidad:
                    ss = "   UNIT:#";
                    if genero == 0 { ss += "   Gen: Fem#"; }
                    else { ss += "   Gen: Mas#"; }
                    ss += "   Rol: " + s_spanish(1100 + rol) + "#";
                    ss += "   Beh: " + s_spanish(1000 + comport) + "#";
                    ss += "   Zon: " + s_spanish(900 + zona) + "#";
                    if esactiv { ss += "   Act: Y#"; }
                    else { ss += "   Act: N#"; }
                    ss += "   Liv: " + s_porcent(vida, s_vida_unidad(id)) + "%#";
                    if fertil == 1 { ss += "   Cha: Y#"; }
                    else if fertil == 0 { ss += "   Cha: N#"; }
                    else { ss += "   Cha: ?#"; }
                    ss += "   Coa: " + s_porcent(capa, m_sim_vidacapa) + "%#";
                    if arma { ss += "   Wea: Y#"; }
                    else { ss += "   Wea: N#"; }
                    ss += "   Mov: " + s_spanish(170 + min(1, ceil(movim))) + "#";
                    if toxico != -1 { ss += "   Tox: " + s_spanish(900 + toxico) + "#"; }
                    else { ss += "   Tox: ?#"; }
                    ss += "   Foo: " + s_porcent(comida, m_sim_comefull) + "%#";
                    ss += "   Die: " + s_spanish(173 + suerte) + "#";
                    ss += ".";
                    var c;
                    var a = view_hview[0] - string_height(ss) * e * 1.2;
                    if conti == -1 {
                        c = tinte[zona];
                    }
                    else {
                        c = tinte[conti];
                    }
                    // dibujar fondo blanco
                    draw_set_alpha(0.5);
                    draw_rectangle_colour(xv, yv + a - 100 * e,
                        xv + string_width(ss) * e * 1.2, yv + view_hview[0],
                        c_white, c_white, c_white, c_white, false);
                    draw_set_alpha(1);
                    // dibujar monigote
                    if capa != 0 {
                        draw_sprite_ext(d_supunidad, 2, xv, yv + a,
                            e, e, 0, c, 1);
                    }
                    draw_sprite_ext(d_supunidad, genero, xv, yv + a,
                        e, e, 0, c, 1);
                    if arma {
                        draw_sprite_ext(d_supunidad, 3, xv, yv + a,
                            e, e, 0, c, 1);
                    }
                    if rol != m_rol_vivir or fertil == 1 {
                        draw_sprite_ext(d_supitem, rol, xv, yv + a,
                            e, e, 0, c, 1);
                    }
                    break;
                case o_robot:
                    ss = "   BOT:#";
                    ss += "   Beh: " + s_spanish(1000 + comport) + "#";
                    ss += "   Zon: " + s_spanish(900 + zona) + "#";
                    ss += "   Clk: " + s_porcent(reloj_fin, m_sim_relojbot) + "%#";
                    ss += "   Liv: " + s_porcent(vida, s_vida_unidad(id)) + "%#";
                    ss += "   Mov: " + s_spanish(170 + movim) + "#";
                    ss += ".";
                    var c;
                    var a = view_hview[0] - string_height(ss) * e * 1.2;
                    if conti == -1 {
                        c = tinte[zona];
                    }
                    else {
                        c = tinte[conti];
                    }
                    // dibujar fondo blanco
                    draw_set_alpha(0.5);
                    draw_rectangle_colour(xv, yv + a - 100 * e,
                        xv + string_width(ss) * e * 1.2, yv + view_hview[0],
                        c_white, c_white, c_white, c_white, false);
                    draw_set_alpha(1);
                    // dibujar monigote
                    draw_sprite_ext(d_supunidad, 7, xv, yv + a,
                        e, e, 0, c, 1);
                    break;
                case o_perro:
                    ss = "   DOG:#";
                    ss += "   Zon: " + s_spanish(900 + zona) + "#";
                    ss += "   Liv: " + s_porcent(vida, s_vida_unidad(id)) + "%#";
                    ss += "   Mov: " + s_spanish(170 + movim) + "#";
                    ss += ".";
                    var c;
                    var a = view_hview[0] - string_height(ss) * e * 1.2;
                    if conti == -1 {
                        c = tinte[zona];
                    }
                    else {
                        c = tinte[conti];
                    }
                    // dibujar fondo blanco
                    draw_set_alpha(0.5);
                    draw_rectangle_colour(xv, yv + a - 100 * e,
                        xv + string_width(ss) * e * 1.2, yv + view_hview[0],
                        c_white, c_white, c_white, c_white, false);
                    draw_set_alpha(1);
                    // dibujar monigote
                    draw_sprite_ext(d_supunidad, 6, xv, yv + a,
                        e, e, 0, c, 1);
                    break;
                case o_infante:
                    ss = "   KID:#";
                    ss += "   Zon: " + s_spanish(900 + zona) + "#";
                    ss += "   Clk: " + s_porcent(m_sim_relojadulto - reloj_fin, m_sim_relojadulto) + "%#";
                    ss += "   Liv: " + s_porcent(vida, s_vida_unidad(id)) + "%#";
                    ss += "   Mov: " + s_spanish(170 + movim) + "#";
                    ss += ".";
                    var c;
                    var a = view_hview[0] - string_height(ss) * e * 1.2;
                    if conti == -1 {
                        c = tinte[zona];
                    }
                    else {
                        c = tinte[conti];
                    }
                    // dibujar fondo blanco
                    draw_set_alpha(0.5);
                    draw_rectangle_colour(xv, yv + a - 100 * e,
                        xv + string_width(ss) * e * 1.2, yv + view_hview[0],
                        c_white, c_white, c_white, c_white, false);
                    draw_set_alpha(1);
                    // dibujar monigote
                    draw_sprite_ext(d_supunidad, 5, xv, yv + a,
                        e, e, 0, c, 1);
                    break;
                case o_fantasma:
                    ss = "   GHOST:#";
                    ss += "   Zon: " + s_spanish(900 + zona) + "#";
                    ss += "   Clk: " + s_porcent(reloj_fin, m_sim_relojfanta) + "%#";
                    ss += ".";
                    var c;
                    var a = view_hview[0] - string_height(ss) * e * 1.2;
                    if conti == -1 {
                        c = tinte[zona];
                    }
                    else {
                        c = tinte[conti];
                    }
                    // dibujar fondo blanco
                    draw_set_alpha(0.5);
                    draw_rectangle_colour(xv, yv + a - 100 * e,
                        xv + string_width(ss) * e * 1.2, yv + view_hview[0],
                        c_white, c_white, c_white, c_white, false);
                    draw_set_alpha(1);
                    // dibujar monigote
                    draw_sprite_ext(d_supunidad, 8, xv, yv + a,
                        e, e, 0, c, 0.666);
                    break;
                case o_centro:
                    ss = "   CENTER:#";
                    ss += "   Zon: " + s_spanish(900 + zona) + "#";
                    ss += "   Tot: " + string(unit_total) + "#";
                    ss += "   Act: " + string(unit_activ) + "#";
                    ss += "   Evo: " + string(unit_evoke) + "#";
                    ss += "   Ali: " + string(unit_vivas) + "#";
                    if estad_mifin == -1 {
                        ss += "   Dis: " + string(s_units_disp(id)) + "#";
                    }
                    else {
                        ss += "   Dis: " + string(unit_vivas) + "#";
                    }
                    ss += "   Fem: " + s_porcent(unit_femin, 1) + "%#";
                    ss += "   Liv: " + s_porcent(resist_act, resist_tot) + "%#";
                    ss += "   Hos: " + string(round(hostigue)) + "#";
                    ss += "   ...#";
                    ss += "   Hun: " + string(estad_cazados) + "#";
                    ss += "   Sie: " + string(estad_asedio) + "#";
                    if estad_mifin == -1 { ss += "   End: ?#"; }
                    else { ss += "   End: " + s_minutes(estad_mifin / room_speed) + "#"; }
                    if estad_killer == -1 { ss += "   Kil: ?#"; }
                    else { ss += "   Kil: " + s_spanish(900 + estad_killer) + "#"; }
                    ss += "   ...#   Rol:#";
                    for (var i = 0; i &lt; m_rol_total; i++) {
                        ss += "   " + s_spanish(1100 + i) + ": " + s_porcent(rol_porcent[i], 1) + "%";
                        i++;
                        if i &lt; m_rol_total {
                            ss += " " + s_spanish(1100 + i) + ": " + s_porcent(rol_porcent[i], 1) + "%";
                        }
                        ss += "#";
                    }
                    ss += ".";
                    // dibujar fondo blanco
                    var a = view_hview[0] - string_height(ss) * e * 1.2;
                    draw_set_alpha(0.5);
                    draw_rectangle_colour(xv, yv + a,
                        xv + string_width(ss) * e * 1.2, yv + view_hview[0],
                        c_white, c_white, c_white, c_white, false);
                    draw_set_alpha(1);
                    break;
                case o_carpa:
                    ss = "   TOWER:#";
                    ss += "   Zon: " + s_spanish(900 + zona) + "#";
                    ss += "   Lvl: " + string(aporte) + "#";
                    ss += ".";
                    // dibujar fondo blanco
                    var a = view_hview[0] - string_height(ss) * e * 1.2;
                    draw_set_alpha(0.5);
                    draw_rectangle_colour(xv, yv + a,
                        xv + string_width(ss) * e * 1.2, yv + view_hview[0],
                        c_white, c_white, c_white, c_white, false);
                    draw_set_alpha(1);
                    break;
            }
            draw_set_valign(fa_bottom);
            draw_set_halign(fa_left);
            draw_text_transformed_colour(xv, yv + view_hview[0], ss,
                e * 1.2, e * 1.2, 0, lc, lc, lc, lc, 1);
        }
    }
    else {
        enmira = noone;
    }
}

// datos estadisticos de guerra
if !secreto {
    ss = ".#Statistics:   #" +
        string(unit_totalmundo) + " :Popul   #" +
        string(unit_vivas) + " :Units   #" +
        string(inst_vivas) + " :Insta   #" +
        string(inst_maxim) + " :MaxIn   #" +
        string(inst_total) + " :Total   #";
    var dis = ds_priority_create();
    var caz = ds_priority_create();
    var ase = ds_priority_create();
    var conq = ds_priority_create();
    var vid = ds_priority_create();
    var yo, wins, zz, vv, isz;
    if o_info.continental {
        isz = false;
        with o_centro {
            s_priority_sum(dis, conti, s_units_disp(id));
            s_priority_sum(caz, conti, estad_cazados);
            s_priority_sum(ase, conti, estad_asedio);
            yo = zona;
            wins = estad_asedio / o_mundo.unit_totalmundo;
            with o_centro {
                if estad_killer == yo {
                    wins++;
                }
            }
            s_priority_sum(conq, conti, wins);
            if estad_mifin == -1 {
                s_priority_sum(vid, conti, (m_sim_limite_s + resist_act) * room_speed);
            }
            else {
                s_priority_sum(vid, conti, estad_mifin);
            }
        }
    }
    else {
        isz = true;
        with o_centro {
            ds_priority_add(dis, zona, s_units_disp(id));
            ds_priority_add(caz, zona, estad_cazados);
            ds_priority_add(ase, zona, estad_asedio);
            yo = zona;
            wins = estad_asedio / o_mundo.unit_totalmundo;
            with o_centro {
                if estad_killer == yo {
                    wins++;
                }
            }
            ds_priority_add(conq, zona, wins);
            if estad_mifin == -1 {
                ds_priority_add(vid, zona, (m_sim_limite_s + resist_act) * room_speed);
            }
            else {
                ds_priority_add(vid, zona, estad_mifin);
            }
        }
    }
    ss += "... #Dis:   #";
    repeat 3 {
        zz = ds_priority_find_max(dis);
        vv = ds_priority_find_priority(dis, zz);
        if vv == 0 { break }
        ss += string(vv) + " :" + s_spanish(s_namezonaconti(zz, isz)) + "   #";
        ds_priority_delete_max(dis);
    }
    ss += "...   #Hun:   #";
    repeat 3 {
        zz = ds_priority_find_max(caz);
        vv = ds_priority_find_priority(caz, zz);
        if vv == 0 { break }
        ss += string(vv) + " :" + s_spanish(s_namezonaconti(zz, isz)) + "   #";
        ds_priority_delete_max(caz);
    }
    ss += "...   #Sie:   #";
    repeat 3 {
        zz = ds_priority_find_max(ase);
        vv = ds_priority_find_priority(ase, zz);
        if vv == 0 { break }
        ss += string(vv) + " :" + s_spanish(s_namezonaconti(zz, isz)) + "   #";
        ds_priority_delete_max(ase);
    }
    ss += "...   #Kill:   #";
    repeat 3 {
        zz = ds_priority_find_max(conq);
        vv = floor(ds_priority_find_priority(conq, zz));
        if vv == 0 { break }
        ss += string(vv) + " :" + s_spanish(s_namezonaconti(zz, isz)) + "   #";
        ds_priority_delete_max(conq);
    }
    ss += "...   #Liv:   #"
    var cc = true;
    while !ds_priority_empty(vid) {
        zz = ds_priority_find_max(vid);
        vv = ds_priority_find_priority(vid, zz);
        if vv &lt;= m_sim_limite_s * room_speed {
            ss += "x-" + s_spanish(s_namezonaconti(zz, isz));
        }
        else {
            ss += s_spanish(s_namezonaconti(zz, isz));
        }
        if cc {
            cc = false;
            ss += "   ";
        }
        else {
            cc = true;
            ss += "   #";
        }
        ds_priority_delete_max(vid);
    }
    ds_priority_destroy(dis);
    ds_priority_destroy(caz);
    ds_priority_destroy(ase);
    ds_priority_destroy(conq);
    ds_priority_destroy(vid);
    // dibujar fondo blanco
    var a = view_hview[0] - string_height(ss) * e * 1.2;
    draw_set_alpha(0.5);
    draw_rectangle_colour(xv + view_wview[0] - string_width(ss) * e * 1.2, yv,
        xv + view_wview[0], yv + string_height(ss) * e * 1.2,
        c_white, c_white, c_white, c_white, false);
    draw_set_alpha(1);
    draw_set_valign(fa_top);
    draw_set_halign(fa_right);
    draw_text_transformed_colour(xv + view_wview[0], yv, ss,
        e * 1.2, e * 1.2, 0, lc, lc, lc, lc, 1);
}

// dibujar el puntero
draw_sprite_ext(d_mouse, 0, mouse_x, mouse_y, e, e, 0, c_white, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// dibujar circulo de vision de unidad
if enmira != noone {
    if instance_exists(enmira) {
        with enmira {
            var cc;
            if conti == -1 {
                cc = tinte[zona];
            }
            else {
                cc = tinte[conti];
            }
            cc = merge_colour(cc, c_black, 0.5);
            draw_set_alpha(0.8);
            draw_circle_colour(x, y, m_sim_vision, cc, cc, true);
            draw_circle_colour(x, y, visionmed, cc, cc, true);
            if object_index == o_centro {
                var yo = id;
                with o_grupo {
                    if zona == yo.zona {
                        draw_circle_colour(x, y, 15, cc, cc, true);
                        draw_circle_colour(x, y, 25, cc, cc, true);
                        draw_line_colour(x, y, yo.x, yo.y, cc, cc);
                    }
                }
            }
            else if object_index == o_perro {
                draw_circle_colour(x, y, m_sim_olfato, cc, cc, true);
            }
            draw_set_alpha(1);
        }
    }
    else {
        enmira = noone;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
