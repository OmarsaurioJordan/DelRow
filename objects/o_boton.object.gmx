<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tipo = noone; // que boton de la GUI es
sobre = false; // true si el mouse esta encima
resaltado = false; // true si aparece marco encima
activo = true; // false boton gris sin funcion
colicaja = 40; // radio de colision clic

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if activo {
    if point_distance(x, y, mouse_x, mouse_y) &lt; colicaja {
        sobre = true;
    }
    else {
        sobre = false;
    }
    
    if sobre and mouse_check_button_pressed(mb_left) and o_app.reloj_notifi == 0 {
    switch tipo {
        case m_bot_perfil:
        case m_bot_busqueda:
        case m_bot_zona:
        case m_bot_ayuda:
        case m_bot_guerra:
            s_open_perfil("");
            s_menu(tipo);
            s_actu_txt();
            if o_app.menu == m_bot_zona {
                s_actualizacion(true);
            }
            else if o_app.menu == m_bot_guerra {
                s_actualizacion(false);
            }
            break;
        case m_bot_login:
            var pas1 = s_get_texto(m_txt_login_pasword, true);
            var pas2 = s_get_texto(m_txt_login_newpas, true);
            if string_length(pas1) &lt; 6 or (pas2 != "" and string_length(pas2) &lt; 6) {
                s_notificacion(411);
            }
            else if s_spam_inter() {
                var iden = s_get_texto(m_txt_login_identifi, true);
                if iden == "" {
                    s_notificacion(410);
                }
                else {
                    pas1 = s_md5(pas1);
                    if pas2 != "" {
                        pas2 = s_md5(pas2);
                    }
                    if s_escorreo(iden) {
                        http_get(m_servidor + m_clave_web + "|login|0|" + iden +
                            "|" + pas1 + "|" + pas2);
                    }
                    else {
                        http_get(m_servidor + m_clave_web + "|login|1|" + iden +
                            "|" + pas1 + "|" + pas2);
                    }
                }
            }
            break;
        case m_bot_registro:
            if s_spam_inter() {
                var cc = s_get_texto(m_txt_regi_correo, true);
                if s_escorreo(cc) {
                    http_get(m_servidor + m_clave_web + "|register|" + cc);
                }
                else {
                    s_notificacion(410);
                }
            }
            break;
        case m_bot_idioma:
            do {
                o_app.idioma = s_cambia_idioma(o_app.idioma);
            }
            until s_verifica_idioma(o_app.idioma);
            s_set_font(o_app.idioma);
            s_gui_ini_save("idioma", o_app.idioma);
            break;
        case m_bot_emocion_i:
            o_app.usuario_emocion--;
            if o_app.usuario_emocion &lt; 0 {
                o_app.usuario_emocion = sprite_get_number(d_emocion) - 1;
            }
            break;
        case m_bot_emocion_d:
            o_app.usuario_emocion++;
            if o_app.usuario_emocion &gt; sprite_get_number(d_emocion) - 1 {
                o_app.usuario_emocion = 0;
            }
            break;
        case m_bot_pelo_i:
            o_app.usuario_pelo--;
            if o_app.usuario_pelo &lt; 0 {
                o_app.usuario_pelo = sprite_get_number(d_pelo) - 1;
            }
            s_sinbarba(false);
            break;
        case m_bot_pelo_d:
            o_app.usuario_pelo++;
            if o_app.usuario_pelo &gt; sprite_get_number(d_pelo) - 1 {
                o_app.usuario_pelo = 0;
            }
            s_sinbarba(true);
            break;
        case m_bot_tinte_i:
            o_app.usuario_tinte--;
            if o_app.usuario_tinte &lt; 0 {
                o_app.usuario_tinte = m_dat_tintes - 1;
            }
            break;
        case m_bot_tinte_d:
            o_app.usuario_tinte++;
            if o_app.usuario_tinte &gt; m_dat_tintes - 1 {
                o_app.usuario_tinte = 0;
            }
            break;
        case m_bot_barba_i:
            o_app.usuario_barba--;
            if o_app.usuario_barba &lt; 0 {
                o_app.usuario_barba = sprite_get_number(d_barba) - 1;
            }
            s_sinbarba(false);
            break;
        case m_bot_barba_d:
            o_app.usuario_barba++;
            if o_app.usuario_barba &gt; sprite_get_number(d_barba) - 1 {
                o_app.usuario_barba = 0;
            }
            s_sinbarba(true);
            break;
        case m_bot_piel_i:
            o_app.usuario_piel--;
            if o_app.usuario_piel &lt; 0 {
                o_app.usuario_piel = m_dat_pieles - 1;
            }
            break;
        case m_bot_piel_d:
            o_app.usuario_piel++;
            if o_app.usuario_piel &gt; m_dat_pieles - 1 {
                o_app.usuario_piel = 0;
            }
            break;
        case m_bot_camisa_i:
            o_app.usuario_camisa--;
            if o_app.usuario_camisa &lt; 0 {
                o_app.usuario_camisa = m_dat_camisas - 1;
            }
            o_app.reloj_objeto = 6;
            break;
        case m_bot_camisa_d:
            o_app.usuario_camisa++;
            if o_app.usuario_camisa &gt; m_dat_camisas - 1 {
                o_app.usuario_camisa = 0;
            }
            o_app.reloj_objeto = 6;
            break;
        case m_bot_pantalon_i:
            o_app.usuario_pantalon--;
            if o_app.usuario_pantalon &lt; 0 {
                o_app.usuario_pantalon = m_dat_pantalones - 1;
            }
            o_app.reloj_objeto = 6;
            break;
        case m_bot_pantalon_d:
            o_app.usuario_pantalon++;
            if o_app.usuario_pantalon &gt; m_dat_pantalones - 1 {
                o_app.usuario_pantalon = 0;
            }
            o_app.reloj_objeto = 6;
            break;
        case m_bot_genero_i:
        case m_bot_genero_d:
            if o_app.usuario_genero == 1 {
                o_app.usuario_genero = 0;
            }
            else {
                o_app.usuario_genero = 1;
            }
            s_sinbarba(true);
            break;
        case m_bot_rol_i:
            o_app.usuario_rol--;
            if o_app.usuario_rol &lt; 0 {
                o_app.usuario_rol = sprite_get_number(d_edificio) - 1;
            }
            o_app.reloj_objeto = 0;
            break;
        case m_bot_rol_d:
            o_app.usuario_rol++;
            if o_app.usuario_rol &gt; sprite_get_number(d_edificio) - 1 {
                o_app.usuario_rol = 0;
            }
            o_app.reloj_objeto = 0;
            break;
        case m_bot_zodiaco_i:
            o_app.usuario_zodiaco--;
            if o_app.usuario_zodiaco &lt; 0 {
                o_app.usuario_zodiaco = 11;
            }
            break;
        case m_bot_zodiaco_d:
            o_app.usuario_zodiaco++;
            if o_app.usuario_zodiaco &gt; 11 {
                o_app.usuario_zodiaco = 0;
            }
            break;
        case m_bot_zona_i:
            o_app.usuario_zona--;
            if o_app.usuario_zona &lt; 0 {
                o_app.usuario_zona = m_map_total - 1;
            }
            break;
        case m_bot_zona_d:
            o_app.usuario_zona++;
            if o_app.usuario_zona &gt; m_map_total - 1 {
                o_app.usuario_zona = 0;
            }
            break;
        case m_bot_comport_i:
            o_app.usuario_comport--;
            if o_app.usuario_comport &lt; 0 {
                o_app.usuario_comport = m_comport_total - 1;
            }
            break;
        case m_bot_comport_d:
            o_app.usuario_comport++;
            if o_app.usuario_comport &gt; m_comport_total - 1 {
                o_app.usuario_comport = 0;
            }
            break;
        case m_bot_logout:
            if s_eseditado() {
                with o_boton {
                    if tipo &gt;= m_bot_emocion_i and tipo &lt;= m_bot_comport_d {
                        activo = false;
                    }
                }
                with o_texto {
                    activo = false;
                }
                s_open_perfil("");
            }
            else {
                o_app.usuario_pasword = "";
                ini_open("configuracion.ini");
                ini_write_string("login", "password", "");
                ini_close();
                if file_exists("configuracionX.ini") {
                    file_delete("configuracionX.ini");
                }
                s_menu(m_bot_perfil);
            }
            break;
        case m_bot_editar:
            if s_eseditado() {
                if s_spam_inter() {
                    with o_app {
                        usuario_nombre = s_get_texto(m_txt_nombre, false);
                        usuario_texto = s_get_texto(m_txt_texto, false);
                        s_save_perfil("X");
                        var txt = string_replace(usuario_texto, "|", "");
                        var txtl = "0";
                        if string_length(txt) &gt;= m_txtl {
                            txtl = "1";
                        }
                        http_get(m_servidor + m_clave_web + "|edit|" + usuario_correo +
                            "|" + usuario_pasword + "|" + usuario_nombre + "|" +
                            string(usuario_zona) + "|" + string(usuario_emocion) + "|" +
                            string(usuario_genero) + "|" + string(usuario_piel) + "|" +
                            string(usuario_pelo) + "|" + string(usuario_tinte) + "|" +
                            string(usuario_barba) + "|" + string(usuario_camisa) + "|" +
                            string(usuario_pantalon) + "|" + string(usuario_rol) + "|" +
                            string(usuario_zodiaco) + "|" + string(usuario_comport) + "|" +
                            txtl + "|" + txt);
                    }
                }
            }
            else if s_espera(true) {
                http_get(m_servidor + m_clave_web + "|modifi|" + o_app.usuario_nombre);
                s_save_perfil("");
                with o_boton {
                    if tipo &gt;= m_bot_emocion_i and tipo &lt;= m_bot_comport_d {
                        activo = true;
                    }
                }
                with o_texto {
                    activo = true;
                }
            }
            break;
        case m_bot_rebusqueda:
            o_app.busqueda_nombre = "";
            s_menu(m_bot_busqueda);
            break;
        case m_bot_azar:
            if s_spam_inter() {
                with o_app {
                    var na = "";
                    if usuario_pasword != "" {
                        na = usuario_nombre;
                    }
                    if zonabus == -1 {
                        http_get(m_servidor + m_clave_web + "|findrand||" + string(textolargo) +
                            "|" + string(recientes) + "|" + na);
                    }
                    else {
                        http_get(m_servidor + m_clave_web + "|findrand|" + string(zonabus) + "|" +
                            string(textolargo) + "|" + string(recientes) + "|" + na);
                    }
                }
            }
            break;
        case m_bot_search:
            if s_spam_inter() {
                var iden = s_get_texto(m_txt_find, true);
                if iden == "" {
                    s_notificacion(410);
                }
                else {
                    with o_app {
                        var na = "";
                        if usuario_pasword != "" {
                            na = usuario_nombre;
                        }
                        if s_escorreo(iden) {
                            http_get(m_servidor + m_clave_web + "|findusr|0|" + iden + "|" + na);
                        }
                        else {
                            http_get(m_servidor + m_clave_web + "|findusr|1|" + iden + "|" + na);
                        }
                    }
                }
            }
            break;
        case m_bot_self:
            if s_spam_inter() {
                if o_app.usuario_pasword != "" {
                    http_get(m_servidor + m_clave_web + "|findusr|1|" + o_app.usuario_nombre +
                        "|" + o_app.usuario_nombre);
                }
                else {
                    s_notificacion(135);
                }
            }
            break;
        case m_bot_zonabus_i:
            o_app.zonabus--;
            if o_app.zonabus &lt; -1 {
                o_app.zonabus = m_map_total - 1;
            }
            break;
        case m_bot_zonabus_d:
            o_app.zonabus++;
            if o_app.zonabus &gt; m_map_total - 1 {
                o_app.zonabus = -1;
            }
            break;
        case m_bot_contexto:
            if o_app.textolargo == 0 {
                o_app.textolargo = 1;
            }
            else {
                o_app.textolargo = 0;
            }
            break;
        case m_bot_reciente:
            if o_app.recientes == 0 {
                o_app.recientes = 1;
            }
            else {
                o_app.recientes = 0;
            }
            break;
        case m_bot_tema_i:
            o_app.libro--;
            if o_app.libro &lt; 0 {
                o_app.libro = m_libro_total - 1;
            }
            break;
        case m_bot_tema_d:
            o_app.libro++;
            if o_app.libro &gt;= m_libro_total {
                o_app.libro = 0;
            }
            break;
        case m_bot_zonaver_i:
            o_app.info_zona--;
            if o_app.info_zona &lt; 0 {
                o_app.info_zona = m_map_total + m_mmap_total - 1;
            }
            break;
        case m_bot_zonaver_d:
            o_app.info_zona++;
            if o_app.info_zona &gt; m_map_total + m_mmap_total - 1 {
                o_app.info_zona = 0;
            }
            break;
        case m_bot_dato_i:
            o_app.info_dato--;
            if o_app.info_dato &lt; 0 {
                o_app.info_dato = m_est_zodiaco;
            }
            break;
        case m_bot_dato_d:
            o_app.info_dato++;
            if o_app.info_dato &gt; m_est_zodiaco {
                o_app.info_dato = 0;
            }
            break;
        case m_bot_web:
            url_open("https://gamejolt.com/@PersonajeX/games");
            break;
        case m_bot_foto:
            var f = get_save_filename("PNG|*.png", "img");
            if f != "" {
                screen_save("img.png");
                var sp = sprite_add("img.png", 1, false, false, 0, 0);
                var esc = m_foto_h / sprite_get_height(sp);
                var sss = surface_create((room_width / room_height) * m_foto_h, m_foto_h);
                surface_set_target(sss);
                draw_sprite_ext(sp, 0, 0, 0, esc, esc, 0, c_white, 1);
                surface_reset_target();
                sprite_delete(sp);
                surface_save(sss, f);
                surface_free(sss);
            }
            break;
        case m_bot_export:
            var f = get_save_filename("TXT|*.txt", "data");
            if f != "" {
                with o_app {
                    var fff = file_text_open_write(f);
                    file_text_write_string(fff, "DelRow Zone Data by Omwekiatl");
                    file_text_writeln(fff);
                    file_text_write_string(fff, "date: " + date_datetime_string(date_current_datetime()));
                    file_text_writeln(fff);
                    file_text_write_string(fff, "countries (canada, USA, mexico, colombia, brazil, argentina, " +
                        "spain, england, germany, rusia, arabia, india, china, egypt, congo, sudafrica, australia)");
                    file_text_writeln(fff);
                    
                    file_text_write_string(fff, "general (population, active population, femines, max active population)");
                    file_text_writeln(fff);
                    for (var i = 0; i &lt; m_map_total; i++) {
                        for (var k = 0; k &lt;= m_info_record; k++) {
                            if k != 0 { file_text_write_string(fff, ","); }
                            file_text_write_string(fff, string(info_general[i, k]));
                        }
                        file_text_writeln(fff);
                    }
                    
                    file_text_write_string(fff, "rol (house, crop, restorant, loom, mine, factory, hospital, forum, tower, " +
                        "barracks, cementery, ritual, temple, art, gym, games, motel, market, dump, park, farm, port, " +
                        "mail, library, energy, ediffice, bar, laboratory)");
                    file_text_writeln(fff);
                    for (var i = 0; i &lt; m_map_total; i++) {
                        for (var k = 0; k &lt; m_rol_total; k++) {
                            if k != 0 { file_text_write_string(fff, ","); }
                            file_text_write_string(fff, string(info_rol[i, k]));
                        }
                        file_text_writeln(fff);
                    }
                    
                    file_text_write_string(fff, "emotion (happy, crazy, surprised, sad, angry, boring, love)");
                    file_text_writeln(fff);
                    for (var i = 0; i &lt; m_map_total; i++) {
                        for (var k = 0; k &lt; 7; k++) {
                            if k != 0 { file_text_write_string(fff, ","); }
                            file_text_write_string(fff, string(info_emocion[i, k]));
                        }
                        file_text_writeln(fff);
                    }
                    
                    file_text_write_string(fff, "zodiac (aries, taurus, gemini, cancer, leo, virgo, libra, scorpion, " +
                        "sagitarius, capricorn, aquarius, piscis)");
                    file_text_writeln(fff);
                    for (var i = 0; i &lt; m_map_total; i++) {
                        for (var k = 0; k &lt; 12; k++) {
                            if k != 0 { file_text_write_string(fff, ","); }
                            file_text_write_string(fff, string(info_zodiaco[i, k]));
                        }
                        file_text_writeln(fff);
                    }
                    
                    file_text_close(fff);
                }
            }
            break;
        case m_bot_go_test:
            s_datosinfo();
            secreto = false;
            o_info.oficial = false;
            s_extrae_tmp();
            room_goto(w_mundo);
            break;
        case m_bot_go_pro:
            if s_cargapro() {
                secreto = false;
                o_info.oficial = false;
                s_extrae_tmp();
                room_goto(w_mundo);
            }
            break;
        case m_bot_go_real:
            if s_actuinfozona() {
                s_obtieneinfo();
                secreto = false;
                o_info.oficial = true;
                s_extrae_tmp();
                room_goto(w_mundo);
            }
            else {
                s_notificacion(413);
            }
            break;
        case m_bot_go_oficial:
            if s_spam_inter() {
                if o_app.usuario_pasword == "" {
                    s_notificacion(181);
                }
                else {
                    var na = "";
                    if o_app.usuario_pasword != "" {
                        na = o_app.usuario_nombre;
                    }
                    o_app.pide_info = http_get(m_servidor + m_clave_web + "|info|" + na);
                }
            }
            break;
        case m_bot_zonawar_i:
            o_app.info_zonaw--;
            if o_app.info_zonaw &lt; 0 {
                o_app.info_zonaw = m_map_total + m_mmap_total - 1;
            }
            break;
        case m_bot_zonawar_d:
            o_app.info_zonaw++;
            if o_app.info_zonaw &gt; m_map_total + m_mmap_total - 1 {
                o_app.info_zonaw = 0;
            }
            break;
        case m_bot_continental:
            o_info.continental = !o_info.continental;
            break;
    } }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var e = 1;
var c = c_white;
var a = 1;
if sobre {
    e = 1.2;
}
if !activo {
    c = c_gray
    a = 0.3
}
if resaltado {
    draw_sprite(d_fondoboton, 0, x, y);
}
switch tipo {
    case m_bot_perfil: draw_sprite_ext(d_menu, 0, x, y, e, e, 0, c, a); break;
    case m_bot_busqueda: draw_sprite_ext(d_menu, 1, x, y, e, e, 0, c, a); break;
    case m_bot_zona: draw_sprite_ext(d_menu, 2, x, y, e, e, 0, c, a); break;
    case m_bot_ayuda: draw_sprite_ext(d_menu, 3, x, y, e, e, 0, c, a); break;
    case m_bot_guerra: draw_sprite_ext(d_menu, 4, x, y, e, e, 0, c, a); break;
    case m_bot_login: draw_sprite_ext(d_boton, 0, x, y, e, e, 0, c, a); break;
    case m_bot_registro: draw_sprite_ext(d_boton, 0, x, y, e, e, 0, c, a); break;
    case m_bot_idioma: draw_sprite_ext(d_boton, 9, x, y, e, e, 0, c, a); break;
    case m_bot_emocion_i:
    case m_bot_pelo_i:
    case m_bot_tinte_i:
    case m_bot_barba_i:
    case m_bot_piel_i:
    case m_bot_camisa_i:
    case m_bot_pantalon_i:
    case m_bot_genero_i:
    case m_bot_rol_i:
    case m_bot_zodiaco_i:
    case m_bot_zona_i:
    case m_bot_comport_i:
        if activo {
            draw_sprite_ext(d_boton, 4, x, y, e * 0.5, e * 0.5, 0, c, a);
        }
        break;
    case m_bot_zonabus_i:
    case m_bot_tema_i:
    case m_bot_zonaver_i:
    case m_bot_dato_i:
    case m_bot_zonawar_i:
        draw_sprite_ext(d_boton, 4, x, y, e * 0.5, e * 0.5, 0, c, a); break;
    case m_bot_emocion_d:
    case m_bot_pelo_d:
    case m_bot_tinte_d:
    case m_bot_barba_d:
    case m_bot_piel_d:
    case m_bot_camisa_d:
    case m_bot_pantalon_d:
    case m_bot_genero_d:
    case m_bot_rol_d:
    case m_bot_zodiaco_d:
    case m_bot_zona_d:
    case m_bot_comport_d:
        if activo {
            draw_sprite_ext(d_boton, 5, x, y, e * 0.5, e * 0.5, 0, c, a);
        }
        break;
    case m_bot_zonabus_d:
    case m_bot_tema_d:
    case m_bot_zonaver_d:
    case m_bot_dato_d:
    case m_bot_zonawar_d:
        draw_sprite_ext(d_boton, 5, x, y, e * 0.5, e * 0.5, 0, c, a); break;
    case m_bot_logout:
        if s_eseditado() {
            draw_sprite_ext(d_boton, 10, x, y, e, e, 0, c, a);
        }
        else {
            draw_sprite_ext(d_boton, 1, x, y, e, e, 0, c, a);
        }
        break;
    case m_bot_editar:
        if s_eseditado() {
            draw_sprite_ext(d_boton, 0, x, y, e, e, 0, c, a);
        }
        else {
            draw_sprite_ext(d_boton, 2, x, y, e, e, 0, c, a);
        }
        break;
    case m_bot_rebusqueda: draw_sprite_ext(d_menu, 1, x, y, e, e, 0, c, a); break;
    case m_bot_azar: draw_sprite_ext(d_boton, 7, x, y, e, e, 0, c, a); break;
    case m_bot_search: draw_sprite_ext(d_menu, 1, x, y, e, e, 0, c, a); break;
    case m_bot_self: draw_sprite_ext(d_menu, 0, x, y, e, e, 0, c, a); break;
    case m_bot_contexto: draw_sprite_ext(d_boton, 8, x, y, e * 0.5, e * 0.5, 0, c, a); break;
    case m_bot_reciente: draw_sprite_ext(d_tiempo, 2, x, y, e * 0.5, e * 0.5, 0, c, a); break;
    case m_bot_web: draw_sprite_ext(d_boton, 3, x, y, e, e, 0, c, a); break;
    case m_bot_foto: draw_sprite_ext(d_boton, 6, x, y, e, e, 0, c, a); break;
    case m_bot_export: draw_sprite_ext(d_boton, 11, x, y, e, e, 0, c, a); break;
    case m_bot_go_test: draw_sprite_ext(d_boton, 12, x, y, e, e, 0, c, a); break;
    case m_bot_go_pro: draw_sprite_ext(d_boton, 13, x, y, e, e, 0, c, a); break;
    case m_bot_go_real: draw_sprite_ext(d_boton, 14, x, y, e, e, 0, c, a); break;
    case m_bot_go_oficial: draw_sprite_ext(d_boton, 15, x, y, e, e, 0, c, a); break;
    case m_bot_continental:
        draw_sprite_ext(d_boton, 16 + o_info.continental, x, y, e, e, 0, c, a); break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
